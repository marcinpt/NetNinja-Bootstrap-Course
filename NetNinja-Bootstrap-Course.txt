Lekcja-1
Bootstrap to tzw framework CSS - zestaw narzedzi ktore pozwalaja tworzyc strony ktore beda sie automatycznie dostosowywac w zaleznosci na jakim urzadzeniu, lub przegladarce będą wyswietlane (będą "responsywne"). Technicznie to zestaw gotowych klas ktore mozemy wykozystac w CSS. Bootstrap wykozystuje takze w nich JavaScript. Kozystając z Bootstrapa mozemy szybki dostep do klas ktore pozwola nam zbudowac przyciski, rozwijalnemenu czy "plywające" interfejsy.

Lekcja-2
Download softu i instalacja Bootstrap.

Calosc kursu dostepna w repo na Githubie NetNinja:
https://github.com/iamshaunjp/bootstrap-4-playlist

Instalujemy Edytor tekstowy Atom plus wtyczka live-server

Bootstrap - link
https://v4-alpha.getbootstrap.com/getting-started/introduction/
Istniej wiele sposobow uzywania czy pobrania Bootstrap'a
1 poprzez manadzerow pakietow
2 Bootstrap CSS and JS - Reczne pobranie. Jest tam wiele plikow, bibliotek gotowych do uzycia - skompilowanych. Mamy 3 opcje: domyslna, tylko gird, tylko Reboot. Zawarte tez wtyczki JavaScript.
3. Source Files - pliki Sass. Zawarta tez dokumentacja. Zawieraja reguły dla wszystkich pojedynczych komponentow.
4. Bootstrap CDN - najprostszy sposob korzystania - polega na podlinkowaniu w naglowku html w tagu link (style wbudowane) do CSS Bootstrapa w Internecie oraz na koncu sekcji body w tagu script (std sposob na linkowanie skryptow w html) do JavaScriptu Bootstrapa w Internecie.

My wykozystamy 4ty sposob ale recznie tzn kopiujac kod - wchodzac do menu i linku Wprowadzenie i wyborze Szablon wstepny (Starter taplate). Wklejamy go w naszym edytorze ATOM w nowym pliku naszego projektu - index.html.

W head tag meta z nazwa viewport to info ze cokolwiek robimy wykozystujac framework bootstrap'a bedzie automatycznie dostosowywane do ekranow malych urzadzen np tabletow czy smartfonow.
Potem link do CSS
Potem linki do skryptow - tu UWAGA - kolejnosc musi byc zachowana bo np link 3ci kozysta z bibliotek wczesniejszych linkow powyzej.

Lekcja-3
BOOTSTRAP REBOOT
Wprowadzenie uniwersalnego prostego kodu i znormalizowanych poczatkowych stylow dla poszczegolnych elementow strony jak np naglowki, linki, listy, paragrafy, tablice, ...

Wprowadzamy w naszym index pare elementow zeby sprawdzic jak beda wyglaaly style.
Wprowadzamay h2 h2 liste i - nowy rodzaj - form, czyli element formularza z labelem, polem txt i klawiszem do wprwadz.

Wyswietlamy - potem zkomentowujemy link	 do css (...wbudowane) i sprawdzamy ponownie 

Lekcja-4
CONTAINERS AND BREAKPOINTS
Kontenery to podstawowe pojemniki na kontent ktory go odpowiednio stylizuje, zawija itd.
Istnieja 2 rodzaje kontenerow:

fixed - to te w ktorych maxymalne szerokosci tego kontenera "przełączją" sie w zaleznosci na jakiej wielkosci okna/urzadzenia beda wyswietlane. Przelaczanie odbywa się w miejscach zwanymi breakpoints - to okeslone konkretne wartosci szerokosci po przekroczeniu ktorych zostaje przejety max width.

fluid - to takie ktore zawsze maja 100% dostepnej szerokosci

Objewartosci sa powszechnie stosowane w zaleznosci od projektu wizualnego strony.

W index wstawiamy oba kontenery z tekstami (stylizujemy je inline tylko dla celow zadania) i w oknie inspekcji przeladarki zminiejszamy szerokosc okna obserujac jakie wartosci width przyjmuja oba kontenery.

Lekcja-5
GRID SYSTEM - THE BASICS
Koncepca siatki polega na podziale strony na wiersze i kolumny. Kazdy wiersz podzielony jest na 12 kolumn. Projektujac strone i rozmieszczając elementy okreslamy ile kolumn bedzie przypadac na kontener tory bedzie je zawieral. 
Na cele zadania wprowadzamy style wbudowane aby odroznic latwo kontenery.

Zachowujac działanie mechanizmu prawidlowego rozmieszczania el w zaleznosci od rozmiaru okna poslugujemy sie klasami o ustalonych wartosciach jak:

container - glowna klasa okalajaca zawierajaca divy z klasami row

row - klasa dla diva okalającego div'y z klasami col-...

col-md-6	oznaczający ze kont (inczej: komorka-div) z taka klasa bedzie okupowal 6 kolumn (z 12) w urzadzeniach ze sredniej-wlk ekranami. Jesli bedzie 2gi taki sam kontener to bedzie w wierszu zawsze 2 obok ale - UWAGA - wpis md tym samym mowi ze w przypadku malej-wlk ekranow (sm) beda jeden pod drugim. Chcac wymusic jeden-obok-drugiego musielibysmy uzyc col-sm-6 (wyjatek: nie dotyczy bardzo malych ekranow - wtedy tez bedzie 1-pod-2).

col-sm-6 - opisane w gornym przyp

col-lg-3 - analogicznie - beda 3obok-siebie ale tylko na duzych. w mniejszych beda 1-pod-2

Mozemy uzyc kombinacji kilku np:
col-sm-6 col-lg-3 - tutaj w sytuacji jak mamy 4 konenery - na duzych beda 4 obok siebie, ale na srednich beda po 2 obok siebie w 2 wierszach bo mamy do podzielenia tylko 12 kolumn na wiersz (beda 2 wiersze po 2 el - kazdy po 6 col). Na sm beda wszystkie 1-pod-2 - czyli w 4 werszach.

Mozna jeszcze okreslic zeby wszedzie na kazdym ekranie byly obok siebie - np dla 4 kont uzyjemy klasy:
col-3 	tutaj zawsze beda 3 kont 1-obk-2 w jednym wierszu (kazdy 1 z 4 el okupuje po 3 col).

Lekcja-6
GRIS SYSTEM - FLEX
Koncepcja siatki bardziej elastycznie.
Bootstrap pozwala na rozmieszczenie kontenerow w bardziej elastyczny sposób.

Gdy komorki-divy oznaczymy klasami bez podawania liczby kolumn (podajac tylko dla jakich ekranow tj sm md czy lg) jake ma okupowac Bootstrap rozmiesci je automatycznie przyznajac "po równo"

2gi element elastycznosci to taki gdzie jedna z komorek-div ma miec konkretna ilosc kolumn. Bootstrap automatycznie "wypełni" pozostałymi komorkami-divami pozostała przestrzen we wiersu.

Teraz przypadek gdy mamy kilka komorek-divow np 3 ale po 2 col. Bootstrap ustawi je od poczatku wiersza a pozostala czesc czesc wiersza bedzie pusta.

Do ww - gdy chcemy aby nasze 3 komorki-divy pojawily sie na srodku wiersza. Wykozystujemy klase justyfy-content-md-center, ktora dopisujemy w divie "wierszowym" (okalajacym komorki-divy)

Mozna tez zmienic kolejnosc od lewej komorek-divów poprzez dodanie dodatkowej klasy - tym razem do komorkidiva ktora chcemy przestawic - np flex-last, czy flex-first

Jest wiele wiecej mozliwosci wykorzystujacych flex Grid
Link do strony:
https://v4-alpha.getbootstrap.com/utilities/flexbox/

Lekcja-7
JUMBOTRONS
Co to je? - to klasa dla diva ktory bedzie zawieral jakis banner reklamowy z marketingowymi informacjami lub np grafike naglowkowa. Taki div jesli bedzie zawarty w jakim divie okalajacym nie bedzie zawieral calej szerokosci. 

Jesli bysmy chcieli aby zawieral sie w calej szerokosci od lewej do prawej to usuwamy diva okalajacego z klasa container - teraz mamy cala szerokosc.

Gdy teraz zmienimy kolor (do celow testowych) - widzimy zaokraglone rogi. Aby wypelnic calosc "prostokata" dopisujemy kolejna klase do naszego diva - jumbotron-fluid.

Dodajemy jakis kontent - h1 i p. idzimy ze jeston ustawiony przy samej lewej. Nie chcemy tak - chcemy je odsunac. Aby tego dokonac robimy okalający kontener - wewn naszego diva z jumbo... tworzymy okalajacego nasz kontent (h1 i p) diva z klasa container.

Dalsze udoskonalenie w nast lekcji

Lekcja-8
BOOTSTRAP UTILITIES & TYPOGRAPHY
Link do Utilities Bootstrap gdzie znajduje się zbior klas-utylities:

https://v4-alpha.getbootstrap.com/utilities/borders/

Wykozystując powyzsze klasy-narzedzia bedziemy upiekszac nasz dosc nudny projekt gdzie jak do tej pory jest tylko div z klasa jumbotron i z mała zawartoscia. Wykozystamy zaledwie kilka z dosc obszernej listy.
Szukamy na liscie (w menu Color) kolorow tla - kazde tlo ma swoja klase-nazwe. Wybraną wkleimy do argumentu class naszego diva z jumbotron. Na tej samej liscie kolorow tła jest obok klasa od kloru tekstu na przykladzie tego tla. W ten sam sposob dopisujemy do naszych klas diva z jumbotron.

Teraz kolej na typografie. Przechodzimy do menu - Content > Typogrphy:
Tam wyszukujemy na liscie dostepnych naglowkow i tytułów ten ktory nam odpowiada. Wybieramy z listy linijek kodow im odpowiadajcych nazwe uzytej klasy i wklejamy do nazego html'a do h1 (w kontenerze w divie z jumbo) - tym razem jako argument class i jej 1sza wartosc - 1sza klase.
W tym samym miejscy dokumentacji znajdziemy klase dla p tagow - .lead. W analogiczny sposob aplikujemy dla paragrafu.

Teraz chcemy aby tekst nie byl do lewej kontenera a wysrodkowany.
W doc podanej strony przechodzimy do: menu Utilities > Typogrphy
Tam w sekcji Text alignment szukamy przykladu klasy od wysrodkowania - bedzie to text-center. Wklejamy do diva z jumbotron jako kolejna klase. Teraz cały kontent mamy wysrodkowany.

Lekcja-9
CARDS
Karty to nowy komponent Bootstrap'a 4. We wczesniejszej wersji 3.0 jest podobny - panel, jednak komponent Card jest bardziej elastyczny i posiada wiele odmian. Szczegóły na:
https://v4-alpha.getbootstrap.com
menu Components > Card

1szy etap - potrzebujemy grid wiec tworzymy div z container (konieczny dla funkcjonalnosci responsywnosci).

2gi - tworzymy div z row (konieczny dla funkcjonalnosci responsywnosci) - w nim beda divy-komorki ktore beda okupowac col'y.

Nastepnie tworzymy 1 z 4 div-komorek ktore tworzyc beda bloki zawierajace karty. Zapewniamy responsywnosc dla md i lg - maja byc 4 karty wiem dla md okreslamy 6 col a dla lg 3.

Dopiero wewn takiego bloku tworzymy karte - czyli kolejny div ale z card.

Wpisujemy na probe jakis kontent - paragraf. Po zapisaniu i sprawdzeniu wyglad jest bardzo "surowy" i ubogi (mala ramka, brak padding...) Aby to poprawic tworzymy wewn div z card dodatkowy blok div z card-block - jest on przeznaczony wlasnie do zawarcia kontentu w divach-kartach. W nim dopiero tworzymy paragraf.

W tym samym divie z card-block'iem nad paragrafem wstawiamy h3 z z card-title. To bedzie naglowek

Teraz grafika karty. Poniewaz blok div z card-blokiem zapewnia padding, a my chcemy zeby nasz obrazek wypelnil cala szerokosc karty - wstawiamy img bezp w div z card. Aby obrazek nie wyjezdzal poza ramy karty
wykozystujemy klase card-img-top. Jest ok ale obraz jest troche rozciagniety w pionie. Aby zachowac proporcje dodajemy dodatkowo img-fluid. To juz prawie gotowa karta

Powielamy ja x3 zmieniajac tylko nazwe grafiki. Na koniec zabieg estetyczny dot tekstu we wszyskich kartach - korzystamy z klasy text-muted ktora dopisujemy do diva kontenera z siatka - tj z container.

Lekcja-10
BOOTSRAP NAVS
W dok - menu Components > Navs
Tworzymy nawigacje gdzie bedziemy mieli mozliwosc przeczytania zawsze w tym samym miejscu informacji o kliknietej przez nas jednej z kilku pozycji-spikerow bedacych powyzej.

1szy krok - tworzymy naglowek. Bedie to h2 ale z - podobnie jak we wczesniejszych lekcjach - z display-4.
Po wyswietleniu widzimy ze trzaba wysrodkowac - text-center, ale bylo by lepiej z marginesami. Jest na to klasa: dla padding to py- (gora-dol) lub px- (boki) zakonczona cyfra bedaca jego wilkoscia. Dla marging jest to odpowiednio mx- i my- 
My Nadajemy py-5 i my-4

Twozymy blok nav - poprostu tag nav ale z klasa nav.

Wewn nav'a tworzymy juz a linki - narazie z pustym href - ale z nav-link. Powielamy x4 zmieniajac tekst linku w pozostalych 3. Linki juz sa ale byloby fajnie gdyby byly wyjustowane do srodka.

Justujemy linki do srodka - dopisujemy klase justyfy-content-center - gdzie? - W nav.

Teraz chcemy nadac linkom styl "pills" - zaglodamy w doc i wklejamy do nav klase nav-pills. Sprawdzamy: NIC! sie nie zmienilo. Dlaczego? Bo ta klasa dziala dopiero dla linku ktory bedzie aktywny - wiec nadajemy status active dla 1szego linku - dopisujemy w nim klase active. Teraz dopiero jest efekt.

Zauwazamy ze linki nie sa responsywne - przy waskim ekranie nie ukladaja sie 1-pod-2 Jest na to klasa: flex-column. Teraz jest 1-pod-2 ALE jak zwiekszymy szerokosc ekranu to w dalszym ciagu sa in-stack (1-pod-2). Mozemy okreslic ze juz dla srednich ekranow bedzie wszystko w jednym wierszu - klasa: flex-md-row

Teraz tworzymy blok z informacjami o aktualnie wybranym spikerze. Tworzymy div z klasa tag i py-5. Klasa tag to informacja ze blok bedzie zawieral wiele roznych informacji - ktore beda korespondowac do odpowiednich linkow powyzej. Kazda taka informacja zawarta bedzie w swoim divie:

Tworzymy 1szego diva-informacje o 1szym spikerze - div z klasa dab-pane. Wewn umieszczamy h3 i p.
Sprawdzamy - NIC! Powielamy x3. Sprawdzamy - dalej NIC! Dlaczego? - bo - tak jak poprzednio - informacja pojawi sie ale dla informcji o statusie aktywny - dodajemy do 1szego bloku z inf klase active. Teraz sie dopiero wyswitli info.

Teraz uruchamiamy funkcjonalnosc przelaczania odpowiednich inf w zaleznosci od wybranej poz w nav. Jest to mechanizm java scriptu zawarta w bootstrapie. Dokonujem tego dopisując ARGUMENT (nie klase) data-toggle z wartościa "tab" do kazdego linka w navie. Teraz - rownie wazne - musimy powiazac linki z odpowiednimi dla nich blokami z info. Bootstrap nie wie ktory link do jakiego bloku sie odnosi - musimy mu o tym powiedziec:
"Oznaczamy" id kazdy z blokow z inf poprzez dodanie argumentu id z unikalna wartoscia. Teraz powiazanie tych blokow z linkami odbywa sie przez wpisanie odpowiadających id do arg href kazdego z linkow - pamietamy o zanku # przed. Dziala ale blok inf jest ten sam - bo nie zmienilismy go pwielajac wczesniej Poprawiamy kontenet h3 kazdego z pozostalych 3 z 4 blokow.


